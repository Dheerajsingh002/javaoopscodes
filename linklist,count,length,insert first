public class SLL {
    private ListNode head;
    private static class ListNode{
        private int data;
        private ListNode next;
        public ListNode(int data){
            this.data=data;
            this.next=null;
        }
    }
    public void insert(int value){
        ListNode newNode=new ListNode(value);
        newNode.next=head;
        head=newNode;
    }
    public void display(){
        ListNode current=head;
        while(current!=null){
            System.out.print(current.data+"-> ");
            current=current.next;
        }
        System.out.print(" null");
    }
    public int length(){
        ListNode current=head;
        int count=0;
        while(current!=null)
        {
            count++;
            current=current.next;
        }
        return  count;
    }


    public static void main(String[] args) {
        SLL sll=new SLL();
        sll.head=new ListNode(10);
        ListNode second=new ListNode(1);
        ListNode third=new ListNode(8);
        ListNode fourth=new ListNode(11);
        sll.head.next=second;
        second.next=third;
        third.next=fourth;
        SLL sll1=new SLL();
        sll.insert(1);
        sll.insert(2);
        sll.insert(3);
        sll.display();
        System.out.println(" ");
        System.out.println(sll.length());

    }
}
/*How to print elements of a singlylinklist in java
 head
  |
  10 ->1 -> 8-> 11 ->null
  set ListNode reference to Head
  Loop(current!=null)
{
  print node.dataListNode current=head;
  }
  //printing singly linklist
  ListNode current=head;
  while(current!=null){
  System.out.println(current.data+"->");
  current=current.next;
  }
  System.out.println("null");

 */
/* Find the length of linklist in java*
int count=0;
while(current!=null)
{
count++;
curent=current.next;
}
Insert a value in the linklist in the begining
ListNode newNode=new ListNode(value);
newNode.next=head;
head=newNode;
 */
